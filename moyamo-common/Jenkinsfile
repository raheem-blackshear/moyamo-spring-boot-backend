pipeline {
    agent any
    stages {
        stage('build') {
            steps {
                 script {
                     def mvnHome = tool 'maven'
                     def targetVersion = getDevVersion()
                     print 'target build version...'
                     print targetVersion
                     sh "'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean install"
                     def version = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                     // get the current development version
                     developmentArtifactVersion = "${version}-${targetVersion}"
                     print version
                 }
            }
        }
    }
    post {
        always {
            print "always"
        }
        success {
            //sendEmail("Successful");
            print "Successful"
        }
        unstable {
            //sendEmail("Unstable");
            print "Unstable"
        }
        failure {
            //sendEmail("Failed");
            print "Failed"
        }
    }
}

def getDevVersion() {
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber = env.BUILD_NUMBER;
    } else {
        versionNumber = gitCommit.take(8);
    }
    print 'build  versions...'
    print versionNumber
    return versionNumber
}

def getReleaseVersion() {
    def pom = readMavenPom file: 'pom.xml'
    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
    def versionNumber;
    if (gitCommit == null) {
        versionNumber = env.BUILD_NUMBER;
    } else {
        versionNumber = gitCommit.take(8);
    }
    return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
}
